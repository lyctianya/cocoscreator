// Copyright (c) 2017-2018 Xiamen Yaji Software Co., Ltd.

CCEffect %{
  techniques:
  - passes:
    - vert: vs
      frag: fs
      blendState:
        targets:
        - blend: true
      rasterizerState:
        cullMode: none
      properties:
        texture: { value: white }
        alphaThreshold: { value: 0.5 }
        center: { 
          value: [ 0.5, 0.5 ], 
          editor: { 
            tooltip: "中心位置"
          } 
        }
        radius: { 
          value: 0.5, 
          editor: { 
            tooltip: "半径大小",
            range: [0,0.5]
          } 
        }

}%


CCProgram vs %{
  precision highp float;

  #include <cc-global>
  #include <cc-local>

  in vec3 a_position;
  in vec4 a_color;
  out vec4 v_color;

  #if USE_TEXTURE
  in vec2 a_uv0;
  out vec2 v_uv0;
  #endif

  void main () {
    vec4 pos = vec4(a_position, 1);

    #if CC_USE_MODEL
    pos = cc_matViewProj * cc_matWorld * pos;
    #else
    pos = cc_matViewProj * pos;
    #endif

    #if USE_TEXTURE
    v_uv0 = a_uv0;
    #endif

    v_color = a_color;

    gl_Position = pos;
  }
}%


CCProgram fs %{
  precision highp float;

  #include <alpha-test>
  #include <texture>

  in vec4 v_color;

  #if USE_TEXTURE
  in vec2 v_uv0;
  uniform sampler2D texture;
  uniform img {
    vec2 center;
    float radius;
  };
  #endif

  void main () {
    // 先设置一个全为1的颜色，方便以此为基准进行运算
    vec4 o = vec4(1, 1, 1, 1);
    #if USE_TEXTURE
      // 让图片的颜色渲染上去
      CCTexture(texture, v_uv0, o);
      // 对中心点做距离计算
      float mul = distance(v_uv0,center);
      // 默认 做距离的运算，可自己操作矩阵变化
      // float mul = distance(vec2(v_uv0.x,v_uv0.y*2-0.5),vec2(0.5,0.5));
      // 距离大于0.5的，做柔化0.5-0.005的，透明度就为0了
      mul = smoothstep(radius,radius-0.005,mul);
      // 对颜色进行运算
      o *= mul;
    #endif
    //颜色赋值，运算
    o *= v_color;
    ALPHA_TEST(o);
    gl_FragColor = o;
  }
}%
